version: '3.9'
name: tp0

services:
    rabbitmq:
      build:
        context: ./rabbitmq
        dockerfile: rabbitmq.dockerfile
      networks:
        - testing_net
      ports:
        - "5672:5672" # puerto de RabbitMQ
        - "15672:15672" # puerto del panel de control de RabbitMQ
      healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:15672"]
          interval: 10s
          timeout: 5s
          retries: 10

    entry_point:
      container_name: entry_point
      image: entry_point:latest
      entrypoint: python3 /main.py
      restart: on-failure
      depends_on:
        - rabbitmq
      links: 
        - rabbitmq
      environment:
        - PYTHONUNBUFFERED=1
      networks:
        - testing_net
      volumes:
        - ./entry_point/config.ini:/config.ini
        - ./protocol/protocol.ini:/protocol.ini

    fileReader:
      container_name: fileReader
      image: file_reader:latest
      entrypoint: python3 /main.py
      environment:
        - CLI_LOG_LEVEL=DEBUG
      networks:
        - testing_net
      depends_on:
        - entry_point
      volumes:
        - ./file_reader/config.ini:/config.ini
        - ./protocol/protocol.ini:/protocol.ini
        - ./.data/:/data/
 
    broker_weather1: &broker
      container_name: broker_weather1
      image: broker:latest
      entrypoint: python3 /main.py
      restart: on-failure
      depends_on:
        - rabbitmq
      links: 
        - rabbitmq
      environment:
        - BROKER_ID=1
        - BROKER_TYPE=weather
      networks:
        - testing_net

    broker_weather2:
      <<: *broker
      container_name: broker_weather2
      environment:
        - BROKER_ID=2
        - BROKER_TYPE=weather
    
    broker_stations1:
      <<: *broker
      container_name: broker_stations1
      environment:
        - BROKER_ID=1
        - BROKER_TYPE=stations

    broker_stations2:
      <<: *broker
      container_name: broker_stations2
      environment:
        - BROKER_ID=2
        - BROKER_TYPE=stations

    broker_trips1:
      <<: *broker
      container_name: broker_trips1
      environment:
        - BROKER_ID=1
        - BROKER_TYPE=trips

    broker_trips2:
      <<: *broker
      container_name: broker_trips2
      environment:
        - BROKER_ID=2
        - BROKER_TYPE=trips
    
    filter_weather1: &filter
      container_name: filter_weather1
      image: filter:latest
      entrypoint: python3 /main.py
      restart: on-failure
      depends_on:
        - rabbitmq
      links: 
        - rabbitmq
      environment:
        - FILTER_ID=1
        - FILTER_TYPE=we1
      networks:
        - testing_net

    filter_weather2:
      <<: *filter
      container_name: filter_weather2
      environment:
        - FILTER_ID=2
        - FILTER_TYPE=we1

    filter_stations1:
      <<: *filter
      container_name: filter_stations1
      environment:
        - FILTER_ID=1
        - FILTER_TYPE=se3

    filter_stations2:
      <<: *filter
      container_name: filter_stations2
      environment:
        - FILTER_ID=2
        - FILTER_TYPE=se3

    filter_trips_e2_1:
      <<: *filter
      container_name: filter_trips_e2_1
      environment:
        - FILTER_ID=1
        - FILTER_TYPE=te2

    filter_trips_e2_2:
      <<: *filter
      container_name: filter_trips_e2_2
      environment:
        - FILTER_ID=2
        - FILTER_TYPE=te2

    filter_trips_e3_1:
      <<: *filter
      container_name: filter_trips_e3_1
      environment:
        - FILTER_ID=1
        - FILTER_TYPE=te3

    filter_trips_e3_2:
      <<: *filter
      container_name: filter_trips_e3_2
      environment:
        - FILTER_ID=2
        - FILTER_TYPE=te3

    Ej1Solver: &EjSolver
      container_name: Ej1Solver
      image: ej_solver:latest
      entrypoint: python3 /main.py
      restart: on-failure
      depends_on:
        - rabbitmq
      links: 
        - rabbitmq
      environment:
        - EJSOLVER=ej1solver
      networks:
        - testing_net

    Ej2Solver:
      <<: *EjSolver
      container_name: Ej2Solver
      environment:
        - EJSOLVER=ej2solver

    Ej3Solver:
      <<: *EjSolver
      container_name: Ej3Solver
      environment:
        - EJSOLVER=ej3solver

    #EofListener:
    #  container_name: EofListener
    #  image: eof_listener:latest
    #  entrypoint: python3 /main.py
    #  restart: on-failure
    #  depends_on:
    #    - rabbitmq
    #  links: 
    #    - rabbitmq
    #  networks:
    #    - testing_net

networks:
  testing_net:
    ipam:
      driver: default
      config:
        - subnet: 172.25.125.0/24
