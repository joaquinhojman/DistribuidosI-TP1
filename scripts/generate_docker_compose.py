#!/usr/bin/env python3
from configparser import ConfigParser
import os

def initialize_config():
    config = ConfigParser(os.environ)
    config.read("config.ini")
    config_params = {}
    try:
        config_params["WBRKCANT"] = int(os.getenv('WBRKCANT', config["DEFAULT"]["WBRKCANT"]))
        config_params["SBRKCANT"] = int(os.getenv('SBRKCANT', config["DEFAULT"]["SBRKCANT"]))
        config_params["TBRKCANT"] = int(os.getenv('TBRKCANT', config["DEFAULT"]["TBRKCANT"]))
        config_params["WE1FCANT"] = int(os.getenv('WEATHEREJ1FCANT', config["DEFAULT"]["WEATHEREJ1FCANT"]))
        config_params["TE2FCANT"] = int(os.getenv('STATIONSEJ2FCANT', config["DEFAULT"]["STATIONSEJ2FCANT"]))
        config_params["SE2FCANT"] = int(os.getenv('TRIPSEJ2FCANT', config["DEFAULT"]["TRIPSEJ2FCANT"]))
        config_params["SE3FCANT"] = int(os.getenv('STATIONSEJ3FCANT', config["DEFAULT"]["STATIONSEJ3FCANT"]))
        config_params["TE3FCANT"] = int(os.getenv('TRIPSTEJ3FCANT', config["DEFAULT"]["TRIPSTEJ3FCANT"]))
        config_params["EJ1TRIPSCANT"] = int(os.getenv('EJ1TRIPSCANT', config["DEFAULT"]["EJ1TRIPSCANT"]))
        config_params["EJ2TRIPSCANT"] = int(os.getenv('EJ2TRIPSCANT', config["DEFAULT"]["EJ2TRIPSCANT"]))
        config_params["EJ3TRIPSCANT"] = int(os.getenv('EJ3TRIPSCANT', config["DEFAULT"]["EJ3TRIPSCANT"]))
    except KeyError as e:
        raise KeyError("Key was not found. Error: {} .Aborting client".format(e))
    except ValueError as e:
        raise ValueError("Key could not be parsed. Error: {}. Aborting client".format(e))

    return config_params

def generateHeader(docker_compose):
    docker_compose.write(f"version: '3.9'\n")
    docker_compose.write(f"name: tp0'\n")
    docker_compose.write(f"\n")

def generateNetwork(docker_compose):
    docker_compose.write(f"networks:\n")
    docker_compose.write(f"  testing_net:\n")
    docker_compose.write(f"    ipam:\n")
    docker_compose.write(f"      driver: default\n")
    docker_compose.write(f"      config:\n")
    docker_compose.write(f"        - subnet: 172.25.125.0/24\n")
    docker_compose.write(f"\n")

def generateRabbitmq(docker_compose):
    docker_compose.write(f'    rabbitmq:\n')
    docker_compose.write(f'      build:\n')
    docker_compose.write(f'        context: ./rabbitmq\n')
    docker_compose.write(f'        dockerfile: rabbitmq.dockerfile\n')
    docker_compose.write(f'      networks:\n')
    docker_compose.write(f'        - testing_net\n')
    docker_compose.write(f'      ports:\n')
    docker_compose.write(f'        - "5672:5672" # puerto de RabbitMQ\n')
    docker_compose.write(f'        - "15672:15672" # puerto del panel de control de RabbitMQ\n')
    docker_compose.write(f'      healthcheck:\n')
    docker_compose.write(f'          test: ["CMD", "curl", "-f", "http://localhost:15672"]\n')
    docker_compose.write(f'          interval: 10s\n')
    docker_compose.write(f'          timeout: 5s\n')
    docker_compose.write(f'          retries: 10\n')
    docker_compose.write(f"\n")

def generateEntryPoint(docker_compose, wbrkcant, sbrkcant, tbrkcant):

    docker_compose.write(f'    entry_point:\n')
    docker_compose.write(f'      container_name: entry_point\n')
    docker_compose.write(f'      image: entry_point:latest\n')
    docker_compose.write(f'      entrypoint: python3 /main.py\n')
    docker_compose.write(f'      restart: on-failure\n')
    docker_compose.write(f'      depends_on:\n')
    docker_compose.write(f'        - broker_weather1\n')
    docker_compose.write(f'      links: \n')
    docker_compose.write(f'        - rabbitmq\n')
    docker_compose.write(f'      environment:\n')
    docker_compose.write(f'        - PYTHONUNBUFFERED=1\n')
    docker_compose.write(f'        - WBRKCANT={wbrkcant}\n')
    docker_compose.write(f'        - SBRKCANT={sbrkcant}\n')
    docker_compose.write(f'        - TBRKCANT={tbrkcant}\n')
    docker_compose.write(f'      networks:\n')
    docker_compose.write(f'        - testing_net\n')
    docker_compose.write(f'      volumes:\n')
    docker_compose.write(f'        - ./entry_point/config.ini:/config.ini\n')
    docker_compose.write(f'        - ./protocol/protocol.ini:/protocol.ini\n')
    docker_compose.write(f"\n")

def generateFileReader(docker_compose):
    docker_compose.write(f'    fileReader:\n')
    docker_compose.write(f'      container_name: fileReader\n')
    docker_compose.write(f'      image: file_reader:latest\n')
    docker_compose.write(f'      entrypoint: python3 /main.py\n')
    docker_compose.write(f'      environment:\n')
    docker_compose.write(f'        - CLI_LOG_LEVEL=DEBUG\n')
    docker_compose.write(f'      networks:\n')
    docker_compose.write(f'        - testing_net\n')
    docker_compose.write(f'      depends_on:\n')
    docker_compose.write(f'        - entry_point\n')
    docker_compose.write(f'      volumes:\n')
    docker_compose.write(f'        - ./file_reader/config.ini:/config.ini\n')
    docker_compose.write(f'        - ./protocol/protocol.ini:/protocol.ini\n')
    docker_compose.write(f'        - ./.data/:/data/\n')
    docker_compose.write(f"\n")

def generateBrokers(docker_compose, wbrkcant, sbrkcant, tbrkcant):
    for i in range(1, wbrkcant + 1):
        docker_compose.write(f'    broker_weather{i}:\n')
        docker_compose.write(f'      container_name: broker_weather{i}\n')
        docker_compose.write(f'      image: broker:latest\n')
        docker_compose.write(f'      entrypoint: python3 /main.py\n')
        docker_compose.write(f'      restart: on-failure\n')
        docker_compose.write(f'      depends_on:\n')
        docker_compose.write(f'        - EofListener\n')
        docker_compose.write(f'      links: \n')
        docker_compose.write(f'        - rabbitmq\n')
        docker_compose.write(f'      environment:\n')
        docker_compose.write(f'        - BROKER_ID={i}\n')
        docker_compose.write(f'        - BROKER_TYPE=weather\n')
        docker_compose.write(f'      networks:\n')
        docker_compose.write(f'        - testing_net\n')
        docker_compose.write(f"\n")
    for i in range(1, sbrkcant + 1):
        docker_compose.write(f'    broker_stations{i}:\n')
        docker_compose.write(f'      container_name: broker_stations{i}\n')
        docker_compose.write(f'      image: broker:latest\n')
        docker_compose.write(f'      entrypoint: python3 /main.py\n')
        docker_compose.write(f'      restart: on-failure\n')
        docker_compose.write(f'      depends_on:\n')
        docker_compose.write(f'        - EofListener\n')
        docker_compose.write(f'      links: \n')
        docker_compose.write(f'        - rabbitmq\n')
        docker_compose.write(f'      environment:\n')
        docker_compose.write(f'        - BROKER_ID={i}\n')
        docker_compose.write(f'        - BROKER_TYPE=stations\n')
        docker_compose.write(f'      networks:\n')
        docker_compose.write(f'        - testing_net\n')
        docker_compose.write(f"\n")
    for i in range(1, tbrkcant + 1):
        docker_compose.write(f'    broker_trips{i}:\n')
        docker_compose.write(f'      container_name: broker_trips{i}\n')
        docker_compose.write(f'      image: broker:latest\n')
        docker_compose.write(f'      entrypoint: python3 /main.py\n')
        docker_compose.write(f'      restart: on-failure\n')
        docker_compose.write(f'      depends_on:\n')
        docker_compose.write(f'        - EofListener\n')
        docker_compose.write(f'      links: \n')
        docker_compose.write(f'        - rabbitmq\n')
        docker_compose.write(f'      environment:\n')
        docker_compose.write(f'        - BROKER_ID={i}\n')
        docker_compose.write(f'        - BROKER_TYPE=trips\n')
        docker_compose.write(f'      networks:\n')
        docker_compose.write(f'        - testing_net\n')
        docker_compose.write(f"\n")

def generateFilters(docker_compose, we1fcant, se2fcant, te2fcant, se3fcant, te3fcant, ej1tcant, ej2tcant, ej3tcant):
    for i in range(1, we1fcant + 1):
        docker_compose.write(f'    filter_weather{i}:\n')
        docker_compose.write(f'      container_name: filter_weather{i}\n')
        docker_compose.write(f'      image: filter:latest\n')
        docker_compose.write(f'      entrypoint: python3 /main.py\n')
        docker_compose.write(f'      restart: on-failure\n')
        docker_compose.write(f'      depends_on:\n')
        docker_compose.write(f'        - EofTripsListener\n')
        docker_compose.write(f'      links: \n')
        docker_compose.write(f'        - rabbitmq\n')
        docker_compose.write(f'      environment:\n')
        docker_compose.write(f'        - FILTER_ID={i}\n')
        docker_compose.write(f'        - FILTER_TYPE=weatherej1\n')
        docker_compose.write(f'        - EJTRIPSCANT={ej1tcant}\n')
        docker_compose.write(f'      networks:\n')
        docker_compose.write(f'        - testing_net\n')
        docker_compose.write(f"\n")
    for i in range(1, se2fcant + 1):
        docker_compose.write(f'    filter_stations_e2{i}:\n')
        docker_compose.write(f'      container_name: filter_stations_e2{i}\n')
        docker_compose.write(f'      image: filter:latest\n')
        docker_compose.write(f'      entrypoint: python3 /main.py\n')
        docker_compose.write(f'      restart: on-failure\n')
        docker_compose.write(f'      depends_on:\n')
        docker_compose.write(f'        - EofTripsListener\n')
        docker_compose.write(f'      links: \n')
        docker_compose.write(f'        - rabbitmq\n')
        docker_compose.write(f'      environment:\n')
        docker_compose.write(f'        - FILTER_ID={i}\n')
        docker_compose.write(f'        - FILTER_TYPE=stationsej2\n')
        docker_compose.write(f'        - EJTRIPSCANT={ej2tcant}\n')
        docker_compose.write(f'      networks:\n')
        docker_compose.write(f'        - testing_net\n')
        docker_compose.write(f"\n")
    for i in range(1, se3fcant + 1):
        docker_compose.write(f'    filter_stations_e3{i}:\n')
        docker_compose.write(f'      container_name: filter_stations_e3{i}\n')
        docker_compose.write(f'      image: filter:latest\n')
        docker_compose.write(f'      entrypoint: python3 /main.py\n')
        docker_compose.write(f'      restart: on-failure\n')
        docker_compose.write(f'      depends_on:\n')
        docker_compose.write(f'        - EofTripsListener\n')
        docker_compose.write(f'      links: \n')
        docker_compose.write(f'        - rabbitmq\n')
        docker_compose.write(f'      environment:\n')
        docker_compose.write(f'        - FILTER_ID={i}\n')
        docker_compose.write(f'        - FILTER_TYPE=stationsej3\n')
        docker_compose.write(f'        - EJTRIPSCANT={ej3tcant}\n')
        docker_compose.write(f'      networks:\n')
        docker_compose.write(f'        - testing_net\n')
        docker_compose.write(f"\n")
    for i in range(1, te2fcant + 1):
        docker_compose.write(f'    filter_trips_e2_{i}:\n')
        docker_compose.write(f'      container_name: filter_trips_e2_{i}\n')
        docker_compose.write(f'      image: filter:latest\n')
        docker_compose.write(f'      entrypoint: python3 /main.py\n')
        docker_compose.write(f'      restart: on-failure\n')
        docker_compose.write(f'      depends_on:\n')
        docker_compose.write(f'        - EofTripsListener\n')
        docker_compose.write(f'      links: \n')
        docker_compose.write(f'        - rabbitmq\n')
        docker_compose.write(f'      environment:\n')
        docker_compose.write(f'        - FILTER_ID={i}\n')
        docker_compose.write(f'        - FILTER_TYPE=tripsej2\n')
        docker_compose.write(f'      networks:\n')
        docker_compose.write(f'        - testing_net\n')
        docker_compose.write(f"\n")
    for i in range(1, te3fcant + 1):
        docker_compose.write(f'    filter_trips_e3_{i}:\n')
        docker_compose.write(f'      container_name: filter_trips_e3_{i}\n')
        docker_compose.write(f'      image: filter:latest\n')
        docker_compose.write(f'      entrypoint: python3 /main.py\n')
        docker_compose.write(f'      restart: on-failure\n')
        docker_compose.write(f'      depends_on:\n')
        docker_compose.write(f'        - EofTripsListener\n')
        docker_compose.write(f'      links: \n')
        docker_compose.write(f'        - rabbitmq\n')
        docker_compose.write(f'      environment:\n')
        docker_compose.write(f'        - FILTER_ID={i}\n')
        docker_compose.write(f'        - FILTER_TYPE=tripsej3\n')
        docker_compose.write(f'      networks:\n')
        docker_compose.write(f'        - testing_net\n')
        docker_compose.write(f"\n")

def generateEj1Solver(docker_compose, ej1tcant):
    docker_compose.write(f'    Ej1Solver:\n')
    docker_compose.write(f'      container_name: Ej1Solver\n')
    docker_compose.write(f'      image: ej_solver:latest\n')
    docker_compose.write(f'      entrypoint: python3 /main.py\n')
    docker_compose.write(f'      restart: on-failure\n')
    docker_compose.write(f'      depends_on:\n')
    docker_compose.write(f'        rabbitmq:\n')
    docker_compose.write(f'          condition: service_healthy\n')
    docker_compose.write(f'      links: \n')
    docker_compose.write(f'        - rabbitmq\n')
    docker_compose.write(f'      environment:\n')
    docker_compose.write(f'        - EJSOLVER=ej1solver\n')
    docker_compose.write(f'        - EJ1TCANT={ej1tcant}\n')
    docker_compose.write(f'      networks:\n')
    docker_compose.write(f'        - testing_net\n')
    docker_compose.write(f"\n")

def generateEj2Solver(docker_compose, ej2tcant):
    docker_compose.write(f'    Ej2Solver:\n')
    docker_compose.write(f'      container_name: Ej2Solver\n')
    docker_compose.write(f'      image: ej_solver:latest\n')
    docker_compose.write(f'      entrypoint: python3 /main.py\n')
    docker_compose.write(f'      restart: on-failure\n')
    docker_compose.write(f'      depends_on:\n')
    docker_compose.write(f'        rabbitmq:\n')
    docker_compose.write(f'          condition: service_healthy\n')
    docker_compose.write(f'      links: \n')
    docker_compose.write(f'        - rabbitmq\n')
    docker_compose.write(f'      environment:\n')
    docker_compose.write(f'        - EJSOLVER=ej2solver\n')
    docker_compose.write(f'        - EJ2TCANT={ej2tcant}\n')
    docker_compose.write(f'      networks:\n')
    docker_compose.write(f'        - testing_net\n')
    docker_compose.write(f"\n")

def generateEj3Solver(docker_compose, ej3tcant):
    docker_compose.write(f'    Ej3Solver:\n')
    docker_compose.write(f'      container_name: Ej3Solver\n')
    docker_compose.write(f'      image: ej_solver:latest\n')
    docker_compose.write(f'      entrypoint: python3 /main.py\n')
    docker_compose.write(f'      restart: on-failure\n')
    docker_compose.write(f'      depends_on:\n')
    docker_compose.write(f'        rabbitmq:\n')
    docker_compose.write(f'          condition: service_healthy\n')
    docker_compose.write(f'      links: \n')
    docker_compose.write(f'        - rabbitmq\n')
    docker_compose.write(f'      environment:\n')
    docker_compose.write(f'        - EJSOLVER=ej3solver\n')
    docker_compose.write(f'        - EJ3TCANT={ej3tcant}\n')
    docker_compose.write(f'      networks:\n')
    docker_compose.write(f'        - testing_net\n')
    docker_compose.write(f"\n")

def generateEjTripsSolvers(docker_compose, ej1tcant, ej2tcant, ej3tcant, we1fcant, se2fcant, se3fcant):
    for i in range(1, ej1tcant + 1):
        docker_compose.write(f'    Ej1_Trips_Solver_{i}:\n')
        docker_compose.write(f'      container_name: Ej1_Trips_Solver_{i}\n')
        docker_compose.write(f'      image: ej_trips_solver:latest\n')
        docker_compose.write(f'      entrypoint: python3 /main.py\n')
        docker_compose.write(f'      restart: on-failure\n')
        docker_compose.write(f'      depends_on:\n')
        docker_compose.write(f'        - Ej1Solver\n')
        docker_compose.write(f'      links: \n')
        docker_compose.write(f'        - rabbitmq\n')
        docker_compose.write(f'      environment:\n')
        docker_compose.write(f'        - EJ1TRIPSSOLVER_ID={i}\n')
        docker_compose.write(f'        - WE1FCANT={we1fcant}\n')
        docker_compose.write(f'        - EJTRIPSSOLVER=ej1tripssolver\n')
        docker_compose.write(f'      networks:\n')
        docker_compose.write(f'        - testing_net\n')
        docker_compose.write(f"\n")
    for i in range(1, ej2tcant + 1):
        docker_compose.write(f'    Ej2_Trips_Solver_{i}:\n')
        docker_compose.write(f'      container_name: Ej2_Trips_Solver_{i}\n')
        docker_compose.write(f'      image: ej_trips_solver:latest\n')
        docker_compose.write(f'      entrypoint: python3 /main.py\n')
        docker_compose.write(f'      restart: on-failure\n')
        docker_compose.write(f'      depends_on:\n')
        docker_compose.write(f'        - Ej1Solver\n')
        docker_compose.write(f'      links: \n')
        docker_compose.write(f'        - rabbitmq\n')
        docker_compose.write(f'      environment:\n')
        docker_compose.write(f'        - EJ2TRIPSSOLVER_ID={i}\n')
        docker_compose.write(f'        - SE2FCANT={se2fcant}\n')
        docker_compose.write(f'        - EJTRIPSSOLVER=ej2tripssolver\n')
        docker_compose.write(f'      networks:\n')
        docker_compose.write(f'        - testing_net\n')
        docker_compose.write(f"\n")
    for i in range(1, ej3tcant + 1):
        docker_compose.write(f'    Ej3_Trips_Solver_{i}:\n')
        docker_compose.write(f'      container_name: Ej3_Trips_Solver_{i}\n')
        docker_compose.write(f'      image: ej_trips_solver:latest\n')
        docker_compose.write(f'      entrypoint: python3 /main.py\n')
        docker_compose.write(f'      restart: on-failure\n')
        docker_compose.write(f'      depends_on:\n')
        docker_compose.write(f'        - Ej1Solver\n')
        docker_compose.write(f'      links: \n')
        docker_compose.write(f'        - rabbitmq\n')
        docker_compose.write(f'      environment:\n')
        docker_compose.write(f'        - EJ3TRIPSSOLVER_ID={i}\n')
        docker_compose.write(f'        - SE3FCANT={se3fcant}\n')
        docker_compose.write(f'        - EJTRIPSSOLVER=ej3tripssolver\n')
        docker_compose.write(f'      networks:\n')
        docker_compose.write(f'        - testing_net\n')
        docker_compose.write(f"\n")

def generateEOFListener(docker_compose, wbrkcant, sbrkcant, tbrkcant, we1fcant, se2fcant, te2fcant, se3fcant, te3fcant, rmqretries):
    docker_compose.write(f'    EofListener:\n')
    docker_compose.write(f'      container_name: EofListener\n')
    docker_compose.write(f'      image: eof_listener:latest\n')
    docker_compose.write(f'      entrypoint: python3 /main.py\n')
    docker_compose.write(f'      restart: on-failure\n')
    docker_compose.write(f'      depends_on:\n')
    docker_compose.write(f'        - filter_weather1\n')
    docker_compose.write(f'      links: \n')
    docker_compose.write(f'        - rabbitmq\n')
    docker_compose.write(f'      environment:\n')
    docker_compose.write(f'        - WBRKCANT={wbrkcant}\n')
    docker_compose.write(f'        - SBRKCANT={sbrkcant}\n')
    docker_compose.write(f'        - TBRKCANT={tbrkcant}\n')
    docker_compose.write(f'        - WE1FCANT={we1fcant}\n')
    docker_compose.write(f'        - SE2FCANT={se2fcant}\n')
    docker_compose.write(f'        - TE2FCANT={te2fcant}\n')
    docker_compose.write(f'        - SE3FCANT={se3fcant}\n')
    docker_compose.write(f'        - TE3FCANT={te3fcant}\n')
    docker_compose.write(f'      networks:\n')
    docker_compose.write(f'        - testing_net\n')
    docker_compose.write(f"\n")

def generateEOFTripsListener(docker_compose, tbrkcant, te2fcant, te3fcant, ej1tcant, ej2tcant, ej3tcant, rmqretries):
    docker_compose.write(f'    EofTripsListener:\n')
    docker_compose.write(f'      container_name: EofTripsListener\n')
    docker_compose.write(f'      image: eof_trips_listener:latest\n')
    docker_compose.write(f'      entrypoint: python3 /main.py\n')
    docker_compose.write(f'      restart: on-failure\n')
    docker_compose.write(f'      depends_on:\n')
    docker_compose.write(f'        - Ej1TripsSolver_1\n')
    docker_compose.write(f'      links: \n')
    docker_compose.write(f'        - rabbitmq\n')
    docker_compose.write(f'      environment:\n')
    docker_compose.write(f'        - TE2FCANT={te2fcant}\n')
    docker_compose.write(f'        - TE3FCANT={te3fcant}\n')
    docker_compose.write(f'        - TBRKCANT={tbrkcant}\n')
    docker_compose.write(f'        - EJ1TRIPSCANT={ej1tcant}\n')
    docker_compose.write(f'        - EJ2TRIPSCANT={ej2tcant}\n')
    docker_compose.write(f'        - EJ3TRIPSCANT={ej3tcant}\n')
    docker_compose.write(f'      networks:\n')
    docker_compose.write(f'        - testing_net\n')
    docker_compose.write(f"\n")

def generateServices(docker_compose, config_params):
    docker_compose.write(f"services:\n")
    generateRabbitmq(docker_compose)
    generateEntryPoint(docker_compose,config_params["WBRKCANT"],config_params["SBRKCANT"],config_params["TBRKCANT"])
    generateFileReader(docker_compose)
    generateBrokers(docker_compose, config_params["WBRKCANT"],config_params["SBRKCANT"],config_params["TBRKCANT"])
    generateFilters(docker_compose, config_params["WE1FCANT"], config_params["SE2FCANT"], config_params["TE2FCANT"], config_params["SE3FCANT"], config_params["TE3FCANT"],config_params["RMQRETRIES"], config_params["EJ1TCANT"], config_params["EJ2TCANT"], config_params["EJ3TCANT"])
    generateEj1Solver(docker_compose, config_params["EJ1TRIPSCANT"])
    generateEj2Solver(docker_compose, config_params["EJ2TRIPSCANT"])
    generateEj3Solver(docker_compose, config_params["EJ3TRIPSCANT"])
    generateEjTripsSolvers(docker_compose, config_params["EJ1TRIPSCANT"], config_params["EJ2TRIPSCANT"], config_params["EJ3TRIPSCANT"], config_params["WE1FCANT"], config_params["SE2FCANT"], config_params["SE3FCANT"])
    generateEOFListener(docker_compose, config_params["WBRKCANT"],config_params["SBRKCANT"],config_params["TBRKCANT"], config_params["WE1FCANT"], config_params["SE2FCANT"], config_params["TE2FCANT"], config_params["SE3FCANT"], config_params["TE3FCANT"])
    generateEOFTripsListener(docker_compose,config_params["TBRKCANT"], config_params["TE2FCANT"], config_params["TE3FCANT"], config_params["EJ1TRIPSCANT"], config_params["EJ2TRIPSCANT"], config_params["EJ3TRIPSCANT"])

def generateDockerCompose(config_params):
    docker_compose = open("docker-compose-dev.yaml", "w")
    generateHeader(docker_compose)
    generateNetwork(docker_compose)
    generateServices(docker_compose, config_params)
    docker_compose.close()

def main():
    config_params = initialize_config()
    generateDockerCompose(config_params)

main()